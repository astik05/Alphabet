use master
go
ALTER DATABASE AlphabetDB SET SINGLE_USER WITH ROLLBACK IMMEDIATE 
go
drop database AlphabetDB
go
create database AlphabetDB
go
use AlphabetDB
go
create table UserGroup
(
Id int identity(0, 1) primary key,
Name varchar(128) not null,
[Description] varchar(128),
IsDeleted int not null
)
go
create table [User]
(
Id [TINYINT] identity(0, 1) primary key,
FIO varchar(128) not null,
[Login] varchar(32) not null,
[Description] varchar(128),
IsDeleted int not null,
IdUserGroup int not null references UserGroup(Id)
)
go
create table ARM
(
Id [TINYINT] identity(0, 1) primary key,
Name varchar(64) not null,
[Description] varchar(128),
IdARM [TINYINT] null references ARM(Id)
)
go
create table UserGroupPermissions
(
IdUserGroup int not null references UserGroup(Id),
IdARM tinyint not null references ARM(Id)
)
go
create table UserActionType
(
Id [TINYINT] identity(0, 1) primary key,
Name varchar(128) not null,
[Description] varchar(128),
IdARM [TINYINT] not null references ARM(Id),
)
go
create table LogType
(
Id int identity(0, 1) primary key,
Name varchar(128) not null,
[Description] varchar(128)
)
go
create table Log
(
Id int identity(0, 1) primary key,
[Date] datetime2 not null,
IdLogType int not null references LogType(Id),
[Description] varchar(max) not null
)
go
create table Country(
	[Id] [TINYINT] IDENTITY(0,1) NOT NULL primary key,
	[Name] [varchar](128) NOT NULL,
	[ShortName] [varchar](4) NOT NULL,
	[IsDeleted] int NOT NULL
)
go
create table Mark(
	[Id] [TINYINT] IDENTITY(0,1) NOT NULL primary key,
	[Name] [varchar](1) NOT NULL,
	[Description] varchar(128),
	[IsDeleted] int NOT NULL
)
go
create table Person(
	[Id] [decimal](11,0) IDENTITY(0,1) NOT NULL primary key,
	[FIO] [varchar](128) NOT NULL,
	[DateOfBirth] DATE,
	[DateExpire] DATE,
	[Sex] varchar(1),
	[Task] [varchar](2048) NOT NULL,
	[TaskKey] varchar(36),	
	[Route] [bit] NOT NULL,
	[IsDeleted] [BIT] NOT NULL,
	[IdCountry] [TINYINT] references Country(Id),
	[IdMark] [TINYINT] NOT NULL references [Mark](Id),
)
go
create table Telegram(
	[Id] [int] IDENTITY(0,1) NOT NULL primary key,
	[Number] [varchar](10) NOT NULL,
	[DateOfSigning] [date] NOT NULL,	
	[Description] varchar(128),
	[IsDeleted] int NOT NULL
)
go
create table TelegramAction(
	[Id] [TINYINT] IDENTITY(0,1) NOT NULL primary key,
	[Name] [varchar](16) NOT NULL 
)
GO
create table TelegramPerson(
	[Id] [decimal](11,0) IDENTITY(0,1) NOT NULL primary key,
	[IdPerson] [decimal](11,0) not NULL references Person(Id),
	[IdTelegram] [int] not NULL references Telegram(Id),
	[IdTelegramAction] [TINYINT] not null references TelegramAction(Id)
)
go
create table UserAction
(
Id [decimal](11,0) identity(0, 1) primary key,
[Date] datetime2(5) not null,
IdUser [TINYINT] not null references [User](Id),
IdUserActionType [TINYINT] not null references UserActionType(Id),
IdPerson [decimal](11,0) references Person(Id)
)
go
create table UserSession
(
IdUser tinyint primary key,
FlagSession int,
constraint fk_UserSession_User foreign key (IdUser) references [User](Id)
)
-------------------
 


go
--------------------
use [AlphabetDB] 
go
SET IDENTITY_INSERT [Country] ON
go
insert into [Country](Id, Name, ShortName, IsDeleted)
(select * from [db].dbo.[Country])
go
SET IDENTITY_INSERT [Country] OFF 
go
SET IDENTITY_INSERT [Mark] ON
go
insert into [Mark](Id, Name, IsDeleted)
(select *, 0 from [db].dbo.[Mark])
go
SET IDENTITY_INSERT [Mark] OFF 
go
insert into UserGroup(Name, IsDeleted) values('Пользователь',0)
go
SET IDENTITY_INSERT [User] ON
go
insert into [User](Id, FIO, [Login], IsDeleted, IdUserGroup)
(select Id, Name, Name, IsDelete, 0 from [db].dbo.[User])
go
SET IDENTITY_INSERT [User] OFF
go
insert into ARM(Name) values('Редактирование')
go
insert into UserActionType(Name, IdARM) values('Постановка', 0)
go
insert into UserActionType(Name, IdARM) values('Снятие', 0)
go
insert into TelegramAction(Name) values('Постановка')
go
insert into TelegramAction(Name) values('Снятие')
go
SET IDENTITY_INSERT [Person] ON
go
insert into [Person](Id, FIO, DateOfBirth, DateExpire, Sex, Task, IsDeleted, 
IdCountry, Route, IdMark)
( SELECT p.Id, p.Name,   CASE when CAST(substring(p.DateOfBirth, 5, 1)+ substring(p.DateOfBirth, 6, 1) as int) > 30 THEN '19' ELSE 'A20' END+substring(p.DateOfBirth, 5, 1)+ substring(p.DateOfBirth, 6, 1)
+ substring(p.DateOfBirth, 3, 1)+ substring(p.DateOfBirth, 4, 1)+
 substring(p.DateOfBirth, 1, 1)+ substring(p.DateOfBirth, 2, 1), p.DateOfDelete, p.Sex, p.Task, p.IsDelete, 
p.CountryId, pr.RouteId, pr.MarkId  from [db].dbo.Person p
inner join [db].dbo.PersonRoute pr on pr.PersonId=p.Id )
go
SET IDENTITY_INSERT [Person] OFF
go
insert into UserAction([Date], IdUser, IdUserActionType, IdPerson)
(select DateOfInsert,UserId, 0, Id  from [db].dbo.Person)
go
insert into UserAction([Date], IdUser, IdUserActionType, IdPerson)
(select DateOfChange,UserId, 1, Id  from [db].dbo.Person where DateOfChange is not NULL)
go
SET IDENTITY_INSERT [Telegram] ON
go
insert into [Telegram](Id, Number, DateOfSigning, IsDeleted)
(select Id, Number, DateOfSigning,0 from [db].dbo.[Telegram])
go
SET IDENTITY_INSERT [Telegram] OFF
go
insert into [TelegramPerson](IdPerson, IdTelegram, IdTelegramAction)
(select PersonId, TelegramId, IsBasic from [db].dbo.[PersonTelegram] where PersonId is not NULL)




if object_id('AuthorizationUser') is not null
drop proc AuthorizationUser
go
create proc AuthorizationUser(@Login varchar(32))
as
begin
	begin try
	begin tran
		declare @IdUser tinyint
		if exists(select Id from [User] where [Login] = @Login)
		begin
			set @IdUser = (select Id from [User] where [Login] = @Login)
			if(select IsDeleted from [User] where [Login] = @Login) = 0
			begin
				if exists(select 1 from UserSession where IdUser = @IdUser)
				begin
					if exists(select 1 from UserSession where IdUser = @IdUser and FlagSession = 0)
					begin
						update UserSession set FlagSession = 1 where IdUser = @IdUser
						select Id, FIO as [ФИО], [Login] as [Логин], (select [Name] from UserGroup where Id = IdUserGroup) as [Группа прав]
						from [User] where [Login] = @Login
					end
					else
						select 'У данного пользователя уже открыта сессия!' as [Attantion]
				end
				else
					insert into UserSession values(@IdUser, 1)
			end
			else
				select 'Пользователь удален из БД Alphabet!' as [Error]
		end
		else
			select 'Нет такого пользователя в БД Alphabet!' as [Error]
	end try
	begin catch
		insert into [Log] 
		values(GETDATE(), (select Id from LogType where [Name] = 'Warn'), concat('Номер ошибки: ',ERROR_NUMBER() , '. ', 'Описание ошибки: ', ERROR_MESSAGE()))
		rollback tran
		return
	end catch
	commit tran
end

go

if object_id('SelectPermissionARMs') is not null
drop proc SelectPermissionARMs
go
create proc SelectPermissionARMs(@Login varchar(32))
as
begin
	select a.Name as [NameARMs]
	from [User] u join UserGroup ug on u.IdUserGroup = ug.Id join
	UserGroupPermissions ugp on ugp.IdUserGroup = ug.Id join
	ARM a on a.Id = ugp.IdARM where u.Login = @Login
end

go

if object_id('SelectAllUsers') is not null
drop proc SelectAllUsers
go
create proc SelectAllUsers
as
begin
	select u.Id, FIO as [ФИО], Login as [Логин], u.IsDeleted as [Удален?], ug.Name as [Группа прав]
	from [User] u join UserGroup ug on u.IdUserGroup=ug.Id
end

go

if object_id('EditUser') is not null
drop proc EditUser
go
create proc EditUser(@Login varchar(32), @IsDeleted int, @NameUserGroup varchar(128))
as
begin
	if not exists(select 1 from [User] where [Login] = @Login and IsDeleted = @IsDeleted and IdUserGroup = (select Id from UserGroup where [Name] = @NameUserGroup))
	begin
		declare @IsDeletedOld int
		declare @NameUserGroupOld varchar(128)
		select @IsDeletedOld = IsDeleted, @NameUserGroupOld = (select [Name] from UserGroup where Id = IdUserGroup) from [User] where [Login] = @Login
		update [User] set IsDeleted = @IsDeleted, IdUserGroup = (select Id from UserGroup where [Name] = @NameUserGroup)
		where [Login] = @Login
		select concat('Данные пользователя ',@Login, ' успешно изменены! ',
		'Старые данные пользователя: логин - ', @Login, ', удален? - ', @IsDeletedOld, ' , группа прав - ', @NameUserGroupOld,
		'. Новые данные: логин - ', @Login, ', удален? - ', @IsDeleted, ' , группа прав - ', @NameUserGroup)
	end
	else
		select 'Изменений в данных пользователя не произошло!'
end

go

if object_id('AddUser') is not null
drop proc AddUser
go
create proc AddUser(@FIO varchar(128), @Login varchar(32), @NameUserGroup varchar(128))
as
begin
	if not exists(select 1 from [User] where [Login] = @Login)
	begin
		insert into [User] values(@FIO, @Login, null, 0, (select Id from UserGroup where [Name] = @NameUserGroup))
		select concat('Добавленные данные: ФИО - ', @FIO, ', логин - ', @Login, ', группа прав - ', @NameUserGroup)
	end
	else
		select concat('Данный пользователь уже есть в системе! ', 'Добавляемые данные: ФИО - ' , @FIO, ', логин - ', @Login, ', группа прав - ', @NameUserGroup) as Error
end

go

if object_id('AddRecordToLog') is not null
drop proc AddRecordToLog
go
create proc AddRecordToLog(@Datetime datetime2(7), @NameLogType varchar(128), @Description varchar(max))
as
begin
	begin try
		begin tran
		insert into [Log] values(@Datetime, (select Id from LogType where [Name] = @NameLogType), @Description)
	end try
	begin catch
		insert into [Log] 
		values(GETDATE(), (select Id from LogType where [Name] = 'Warn'), concat('Номер ошибки: ',ERROR_NUMBER() , '. ', 'Описание ошибки: ', ERROR_MESSAGE()))
		rollback tran
		return
	end catch
	commit tran
end

go

if object_id('ViewLogs') is not null
drop proc ViewLogs
go
create proc ViewLogs(@DatetimeStart datetime2, @DatetimeFinish datetime2, @NameLogType varchar(128), @Description varchar(max))
as
begin
	select a.Date as [Дата и время события], b.Name as [Уровень событий], a.Description as [Описание события]
	from Log a join LogType b on a.IdLogType = b.Id
	where
	(@DatetimeStart is null or a.Date >= @DatetimeStart) and
	(@DatetimeFinish is null or a.Date <= @DatetimeFinish) and	 
	(@NameLogType is null or b.Name = @NameLogType) and
	(@Description is null or a.Description like concat('%', @Description, '%'))
end

go

if OBJECT_ID('SelectAllUserGroup') is not null
drop proc SelectAllUserGroup
go
create proc SelectAllUserGroup
as
begin
	select Name as [Группа прав] from UserGroup
end

go

if OBJECT_ID('SelectLogTypes') is not null
drop proc SelectLogTypes
go
create proc SelectLogTypes
as
begin
	select Name as [Уровни событий] from LogType
end

go

if OBJECT_ID('InsertRecordUserAction') is not null
drop proc InsertRecordUserAction
go
create proc InsertRecordUserAction(@Datetime datetime2(7), @LoginUser varchar(32), @NameUserActionType varchar(128), @IdPerson int)
as
begin
	begin try
		begin tran
		insert into UserAction 
		values(@Datetime, (select Id from [User] where [Login] = @LoginUser), (select Id from UserActionType where Name = @NameUserActionType), @IdPerson)
	end try
	begin catch
		insert into [Log] 
		values(GETDATE(), (select Id from LogType where [Name] = 'Warn'), concat('Номер ошибки: ',ERROR_NUMBER() , '. ', 'Описание ошибки: ', ERROR_MESSAGE()))
		rollback tran
		return
	end catch
	commit tran
end

go

if object_id('ViewUserActions') is not null
drop proc ViewUserActions
go
create proc ViewUserActions(@DatetimeStart datetime2, @DatetimeFinish datetime2, @LoginUser varchar(32), @NameUserActionType varchar(128))
as
begin
	begin try
		begin tran
		select a.Date as [Дата и время действия], (select [Login] from [User] where Id = a.IdUser) as [Пользователь],
		b.Name as [Тип операции], (select CONCAT('ФИО: ', FIO, ', ДР: ', DateOfBirth) from Person where Id = a.IdPerson) as [Персона]
		from UserAction a join UserActionType b on a.IdUserActionType = b.Id
		where
		(@DatetimeStart is null or a.Date >= @DatetimeStart) and
		(@DatetimeFinish is null or a.Date <= @DatetimeFinish) and
		(@LoginUser is null or a.IdUser = (select Id from [User] where [Login] = @LoginUser)) and
		(@NameUserActionType is null or b.Name = @NameUserActionType)
	end try
	begin catch
		insert into [Log] 
		values(GETDATE(), (select Id from LogType where [Name] = 'Warn'), concat('Номер ошибки: ',ERROR_NUMBER() , '. ', 'Описание ошибки: ', ERROR_MESSAGE()))
		rollback tran
		return
	end catch
	commit tran
end

go

if object_id('SelectUserActionTypes') is not null
drop proc SelectUserActionTypes
go
create proc SelectUserActionTypes
as
begin
	select Name as [Типы операций]
	from UserActionType
end

go

if object_id('ResetUserSession') is not null
drop proc ResetUserSession
go
create proc ResetUserSession(@Login varchar(32))
as
begin
	begin try
		begin tran
		update UserSession set FlagSession = 0 where IdUser = (Select Id from [User] where [Login] = @Login)
	end try
	begin catch
		insert into [Log] 
		values(GETDATE(), (select Id from LogType where [Name] = 'Warn'), concat('Номер ошибки: ',ERROR_NUMBER() , '. ', 'Описание ошибки: ', ERROR_MESSAGE()))
		rollback tran
		return
	end catch
	commit tran
end

go

if object_id('SelectMarks') is not null
drop proc SelectMarks
go
create proc SelectMarks
as
begin
	select [Name] from [Mark]
end

go

if object_id('SelectCountries') is not null
drop proc SelectCountries
go
create proc SelectCountries
as
begin
	select ShortName from [Country]
end

go

if object_id('SelectUsersLogin') is not null
drop proc SelectUsersLogin
go
create proc SelectUsersLogin
as
begin
	select [Login] from [User]
end

go

if object_id('SelectAllArms') is not null
drop proc SelectAllArms
go
create proc SelectAllArms
as
begin
	select [Name] as [Название АРМа] from ARM
end




insert into LogType values('Debug', 'Сообщения отладки, профилирования')
insert into LogType values('Info', 'Обычные сообщения, информирующие о действиях системы')
insert into LogType values('Warn', 'Сообщения, требующие разбора что произошло')
insert into LogType values('Error', 'Сообщения об ошибках в работе системы, требующие вмешательства')
insert into LogType values('Fatal', 'Сообщения о фатальных ошибках, требующие немедленной реакции')


insert into UserGroup(Name, IsDeleted) values('Администраторы',0)
insert into UserGroup(Name, IsDeleted) values('Пользователи',0)

insert into ARM values('АРМ администратора', null, null)
insert into ARM values('АРМ поиска лиц', null, null)
insert into ARM values('АРМ постановка/снятие', null, null)


exec ViewLogs '2022.10.07 05:36:02', '2022.10.08 05:36:02', null, null

exec ViewUserActions '2022.08.08 05:36:02', '2022.10.09 05:36:02', 'Администратор', null



select *
from ARM

select *
from [User]

select *
from UserActionType

select *
from Mark

select *
from Log

select *
from LogType

select *
from Person

select *
from Mark

select *
from ARM

select *
from UserSession

select *
from UserGroup

update UserSession set FlagSession = 0

insert into Mark values('Н',null, 0)

insert into Person values('тест тестов тестович', '1995-04-30', '2025-04-30', 'М', 'asd', 'asd', 2, 0, null, 0)

insert into UserActionType(Name, IdARM) values('Снятие', 0)

insert into ARM values('Работа с пользователями', null, null)
insert into ARM values('Просмотр логов', null, null)
insert into ARM values('Работа в алфавите', null, null)

insert into UserGroupPermissions values(0, 0)
insert into UserGroupPermissions values(0, 1)
insert into UserGroupPermissions values(0, 2)
insert into UserGroupPermissions values(0, 3)
